import { HttpClient } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { AnnotationLevelType, OSegment, OSegmentLevel, PartiturConverter } from '@octra/annotation';
import { ServiceProvider } from '@octra/ngx-components';
import { stringifyQueryParams } from '@octra/utilities';
import { readFileContents } from '@octra/web-media';
import { AppSettings } from '../../shared/app.settings';
import { Task, TaskStatus } from '../tasks';
import { TPortalAudioInfo, TPortalFileInfo } from '../TPortalFileInfoAttributes';
import { IOperation, Operation, OperationOptions, OperationProcessingRound } from './operation';
import { ToolOperation } from './tool-operation';
import { UploadOperation } from './upload-operation';

export type IOctraOperation = IOperation;

export class OCTRAOperation extends ToolOperation {
  public constructor(
    name: string,
    commands: string[],
    title?: string,
    shortTitle?: string,
    task?: Task,
    id?: number,
    serviceProvider?: ServiceProvider,
  ) {
    super(name, commands, title, shortTitle, task, id, serviceProvider);
    this._description =
      'A literal transcript contains the verbatim text of a speech recording.' +
      'These transcripts are either generated by Automatic Speech Recognition or they are created manually from scratch.' +
      'The editor Octra allows you to correct or create such transcripts.';
  }

  public override resultType = 'BAS Partitur Format';

  public override start = async (
    inputs: (TPortalFileInfo | TPortalAudioInfo)[],
    operations: Operation[],
    httpclient: HttpClient,
    accessCode?: string,
  ) => {
    throw new Error('Octra will not be started automatically.');
  };

  public override getStateIcon = (sanitizer: DomSanitizer) => {
    let result = '';

    switch (this.state) {
      case TaskStatus.PENDING:
        result = ``;
        break;
      case TaskStatus.UPLOADING:
        result = `<div class="spinner-border spinner-border-small" role="status">
  <span class="visually-hidden">Loading...</span>
</div>`;
        break;
      case TaskStatus.PROCESSING:
        result = '<i class="bi bi-gear-fill spin link" aria-hidden="true"></i>';
        break;
      case TaskStatus.FINISHED:
        result = '<i class="bi bi-check-lg" aria-hidden="true"></i>';
        break;
      case TaskStatus.READY:
        result = '<i class="bi bi-pencil-square link" aria-hidden="true"></i>';
        break;
      case TaskStatus.ERROR:
        result = '<i class="bi bi-x-lg" aria-hidden="true"></i>';
        break;
    }

    return sanitizer.bypassSecurityTrustHtml(result);
  };

  public override getStateIcon2 = () => {
    let result = '';

    switch (this.state) {
      case TaskStatus.PENDING:
        result = ``;
        break;
      case TaskStatus.UPLOADING:
        result = `<div class="spinner-border spinner-border-small" role="status">
  <span class="visually-hidden">Loading...</span>
</div>`;
        break;
      case TaskStatus.PROCESSING:
        result = '<i class="bi bi-gear-fill spin link" aria-hidden="true"></i>';
        break;
      case TaskStatus.FINISHED:
        result = '<i class="bi bi-check-lg" aria-hidden="true"></i>';
        break;
      case TaskStatus.READY:
        result = '<i class="bi bi-pencil-square link" aria-hidden="true"></i>';
        break;
      case TaskStatus.ERROR:
        result = '<i class="bi bi-x-lg" aria-hidden="true"></i>';
        break;
    }

    return result;
  };

  public override clone(task?: Task, id?: number): OCTRAOperation {
    const selectedTask = task === null || task === undefined ? this.task : task;
    return new OCTRAOperation(this.name, this._commands, this.title, this.shortTitle, selectedTask, id, this.serviceProvider);
  }

  public override fromAny(operationObj: IOctraOperation, commands: string[], task: Task): OCTRAOperation {
    const result = new OCTRAOperation(
      operationObj.name,
      commands,
      this.title,
      this.shortTitle,
      task,
      operationObj.id,
      AppSettings.getServiceInformation(operationObj.serviceProvider),
    );

    for (const round of operationObj.rounds) {
      result.rounds.push(OperationProcessingRound.fromAny(round));
    }
    result.enabled = operationObj.enabled;

    if (result.state === TaskStatus.PROCESSING) {
      if (result.rounds.length > 0) {
        result.changeState(TaskStatus.FINISHED);
      } else {
        result.changeState(TaskStatus.READY);
      }
    }

    return result;
  }

  public override async getToolURL(httpClient: HttpClient): Promise<string> {
    const wavFile = this.task ? (this.task?.operations[0] as UploadOperation)?.wavFile : undefined;
    if (wavFile?.online && wavFile?.url) {
      const serviceProvider = AppSettings.getServiceInformation('BAS')!;
      const audio_url = encodeURIComponent(wavFile.url);
      const audio_name = wavFile.fullname;
      let transcript: string | undefined;
      const embedded = `1`;
      const host = encodeURIComponent(serviceProvider.host);

      let transcriptFile: TPortalFileInfo | undefined = undefined;

      if (!this.lastRound?.lastResult && this.previousOperation) {
        // no results, but previousOperation exists
        if (this.previousOperation.lastRound?.lastResult) {
          transcriptFile = this.previousOperation.lastRound?.lastResult;
        } else if (this.previousOperation.previousOperation?.lastRound?.lastResult) {
          transcriptFile = this.previousOperation.previousOperation.lastRound?.lastResult;
        }
      } else if (this.lastRound) {
        transcriptFile = this.lastRound?.lastResult;
      }

      if (transcriptFile && transcriptFile?.file) {
        if (transcriptFile.extension === '.par') {
          const task = this.task;
          const auiofile = task?.files.find((a) => a.type.includes('audio')) as TPortalAudioInfo;
          const content = await readFileContents<string>(transcriptFile.file, 'text', 'utf-8');
          const importResult = new PartiturConverter().import(
            {
              name: transcriptFile.attributes?.originalFileName ?? transcriptFile.fullname,
              type: transcriptFile.type,
              content,
              encoding: 'utf-8',
            },
            auiofile,
          );
          if (importResult && importResult.annotjson) {
            for (const level of importResult.annotjson.levels as OSegmentLevel<OSegment>[]) {
              if (level.type === AnnotationLevelType.SEGMENT) {
                for (let i = 0; i < level.items.length; i++) {
                  const item = level.items[i];
                  const nextItem = i < level.items.length - 1 ? level.items[i + 1] : undefined;

                  if (nextItem) {
                    const gapSamples = nextItem.sampleDur;

                    if (item.getFirstLabelWithoutName('Speaker')?.value !== '' && nextItem.getFirstLabelWithoutName('Speaker')?.value !== '') {
                      // concat
                      item.replaceFirstLabelWithoutName('Speaker', (value) => {
                        return [value, nextItem.getFirstLabelWithoutName('Speaker')?.value].filter((a) => a !== undefined && a !== '').join(' ');
                      });
                      item.sampleDur += gapSamples;
                      level.items.splice(i + 1, 1);
                      i--;
                    }
                  }
                }
              }
            }

            const result = new PartiturConverter().export(importResult.annotjson, auiofile);
            if (result?.file) {
              const newFile = new File([result.file.content], result.file.name, { type: result.file.type });
              transcript = await this.upload(new TPortalFileInfo(newFile.name, newFile.type, newFile.size, newFile), httpClient);
            }
          }
        }

        if (!transcript) {
          transcript = transcriptFile.url;
        }
      }

      return `${this._commands[0]}/${stringifyQueryParams({
        audio_url,
        audio_name,
        transcript,
        host,
        embedded,
      })}`;
    }
    return '';
  }

  private upload(file: TPortalFileInfo, httpClient: HttpClient): Promise<string> {
    return new Promise<string>((resolve, reject) => {
      const serviceProvider = AppSettings.getServiceInformation('BAS')!;
      const url = `${serviceProvider.host}uploadFileMulti`;
      const subj = UploadOperation.upload([file], url, httpClient);
      subj.subscribe({
        next: (obj) => {
          if (obj.type === 'loadend') {
            // add messages to protocol
            if (obj.warnings) {
              console.warn(obj.warnings);
            }
            resolve(obj.urls![0]);
          }
        },
        error: (err) => {
          reject(err);
        },
      });
    });
  }

  override overwriteOptions(options: OperationOptions) {
    this._serviceProvider = AppSettings.getServiceInformation('BAS');
  }

  override async toAny(): Promise<IOctraOperation> {
    return {
      id: this.id,
      name: this.name,
      enabled: this.enabled,
      rounds: await this.serializeProcessingRounds(),
      serviceProvider: this.serviceProvider?.provider,
    };
  }
}
